#
write.csv(muhat.vals, file="C:\Users\Dave\Documents\compFinance\muhatVals.csv")
write.csv(cov.mat, file="C:\Users\Dave\Documents\compFinance\covMat.csv")
write.csv(muhat.vals, file="C:\\Users\\Dave\\Documents\\compFinance\\muhatVals.csv")
write.csv(cov.mat, file="C:\\Users\\Dave\\Documents\\compFinance\\covMat.csv")
#
# portfolio theory calculations using functions in portfolio.r
#
# compute global minimum variance portfolio with short sales
gmin.port = globalMin.portfolio(muhat.vals, cov.mat)
gmin.port
plot(gmin.port, col="blue")
# compute efficient portfolio with target return equal to highest average return
mu.target = max(muhat.vals)
e1.port = efficient.portfolio(muhat.vals, cov.mat, mu.target)
e1.port
plot(e1.port, col="blue")
# compute covariance b/w min var portfolio and efficient port
t(gmin.port$weights)%*%cov.mat%*%e1.port$weights
# compute efficient frontier of risk assets and plot
e.frontier = efficient.frontier(muhat.vals, cov.mat, alpha.min=-1, alpha.max=1)
summary(e.frontier)
plot(e.frontier, plot.assets=T, col="blue", pch=16, cex=2)
# compute tangency portfolio with rf = 0.005
tan.port = tangency.portfolio(muhat.vals, cov.mat, risk.free=0.005)
summary(tan.port)
plot(tan.port, col="blue")
# efficient portfolio of T-bills + tangency that has the same SD as sbux
names(tan.port)
x.tan = sigmahat.vals["Starbucks"]/tan.port$sd
x.tan
mu.pe = 0.005 + x.tan*(tan.port$er - 0.005)
mu.pe
mu.pe
mu.pe
mu.pe
mu.pe
# compute global minimum variance portfolio with short sales
gmin.port = globalMin.portfolio(muhat.vals, cov.mat)
gmin.port
plot(gmin.port, col="blue")
# compute efficient portfolio with target return equal to highest average return
mu.target = max(muhat.vals)
e1.port = efficient.portfolio(muhat.vals, cov.mat, mu.target)
e1.port
plot(e1.port, col="blue")
# compute covariance b/w min var portfolio and efficient port
t(gmin.port$weights)%*%cov.mat%*%e1.port$weights
e1.port = efficient.portfolio(muhat.vals, cov.mat, mu.target)
e1.port
plot(e1.port, col="blue")
# compute covariance b/w min var portfolio and efficient port
t(gmin.port$weights)%*%cov.mat%*%e1.port$weights
# compute efficient frontier of risk assets and plot
e.frontier = efficient.frontier(muhat.vals, cov.mat, alpha.min=-1, alpha.max=1)
summary(e.frontier)
plot(e.frontier, plot.assets=T, col="blue", pch=16, cex=2)
# compute tangency portfolio with rf = 0.005
tan.port = tangency.portfolio(muhat.vals, cov.mat, risk.free=0.005)
summary(tan.port)
plot(tan.port, col="blue")
# efficient portfolio of T-bills + tangency that has the same SD as sbux
names(tan.port)
x.tan = sigmahat.vals["Starbucks"]/tan.port$sd
x.tan
mu.pe = 0.005 + x.tan*(tan.port$er - 0.005)
mu.pe
qnorm(.05,0.0185,0.059)
x <- rnorm(100, mean=5, sd=2)
x
x <- ceiling(rnomr(23, mean 14, sd=2))
x <- ceiling(rnomr(23, mean =14, sd=2))
x <- ceiling(rnorm(23, mean =14, sd=2))
x
\help (p)
help (p)
help(p)
??p
??tinterval
library("lattice")
??tinterval
fileUrlQ3 <-"https://dl.dropbox.com/u/7710864/data/csv_hid/ss06hid.csv"
houses<-read.csv(fileUrlQ3)
hVAL <- houses[houses$VAL == 24, c("VAL")]
table(is.na(hVAL))
agricultureLogical <- houses[houses$ACR == 3 & houses$AGS == 6]
agricultureLogical <-c(houses$ACR == 3 & houses$AGS == 6)
which(agricultureLogical)
fix(agricultureLogical)
indexes = which(agricultureLogical)
subsetHouses = houses[indexes,]
table(is.na(subsetHouses))
View(subsetHouses)
table(is.na(subsetHouses$MRGX))
splitNames = strsplit(names(houses), "wgtp")
splitNames[[123]]
quantile(houses$YBL)
quantile(na.rm(houses$YBL)
quantile(na.rm(houses$YBL))
quantile(na.rm(houses$YBL))
quantile(houses$YBL, na.rm = TRUE)
quantile(houses$YBL, na.rm = FALSE)
quantile(houses$YBL, na.rm)
quantile(houses$YBL, na.rm = TRUE)
error = qnorm(alpha)*(s/sqrt(n))
alpha = 0.05
n = 100
muhat = 12
s = 4
error = qnorm(alpha)*(s/sqrt(n))
critValue = muhat + error
x <- c(12.0, 10.5, 13.5, 12.5, 9.5, 6.3, 7.2)
mean(x)
median(x)
stdev(x)
stats*x)
stats(x)
sd(x)
x-(sd/sqrt(6))
x-(sd(x)/sqrt(6))
mean(x)-(sd(x)/sqrt(6))
mean(x)-qnorm(.975)(sd(x)/sqrt(6))
mean(x)-qnorm(.975)*(sd(x)/sqrt(6))
mean(x)+qnorm(.975)*(sd(x)/sqrt(6))
qnorm(.975)
mean(x) + 1.96*(sd(x)/sqrt(6))
mean(x) - 1.96*(sd(x)/sqrt(6))
fix(x)
confint(x)
?uniform()
punif(.75)
punif(0.5)
dunif(0.5)
dunif(0.75)
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
qnorm(.95)
xval <- seq(-3.2, 3.2, length = 1000)
yval<- dnorm(xval)
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
x <- seq(qnorm(.95), 3.2, length = 100)
polygon(c(x, rev(x)),c(dnorm(x), rep(0, length(x))), col = "salmon")
text(mean(x), mean(dnorm(x))+.02, "5%", cex = 2)
xval <-seq(0, 1, length = 1000)
yval <- dunif(xval)
plot(xval, yval, type="1", axes = TRUE, frame = F, lwd = 3, xlab = "", ylav = "")
xval <- seq(-3.2, 3.2, length = 1000)
yval<- dnorm(xval)
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
plot(xval, yval, type="1", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
xval <-seq(0, 1, length = 1000)
yval <- dunif(xval)
plot(xval, yval, type="1", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
polygon(c(x, rev(x)),c(dnorm(x), rep(0, length(x))), col = "salmon")
x <- seq(qnorm(.95), 3.2, length = 100)
polygon(c(x, rev(x)),c(dnorm(x), rep(0, length(x))), col = "salmon")
text(mean(x), mean(dnorm(x))+.02, "5%", cex = 2)
text(qnorm(.95), .01, "1.645", cex = 2)
xval <-seq(0, 1, length = 1000)
yval <- dunif(xval)
plot(xval, yval, type="1", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
plot(xval, yval, type = "l", axes = TRUE, frame = TRUE, lwd = 3, xlab = "", ylab = "")
xval <- seq(-3.2, 3.2, length = 1000)
yval<- dnorm(xval)
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
xval <- seq(-3.2, 3.2, length = 1000)
yval<- dnorm(xval)
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
x <- seq(qnorm(.95), 3.2, length = 100)
polygon(c(x, rev(x)),c(dnorm(x), rep(0, length(x))), col = "salmon")
text(mean(x), mean(dnorm(x))+.02, "5%", cex = 2)
text(qnorm(.95), .01, "1.645", cex = 2)
brain = c(965, 1029, 1030, 1285, 1049, 1077, 1037, 1068, 1176, 1105)
IQ = c(90, 85, 86, 102, 103, 97, 124, 125, 102, 114)
df = data.frame (brain, IQ)
df
plot(df$brain,df$IQ)
plot(df$brain,df$IQ, xlab= "Brain Size in cubic cm", ylab = "IQ")
abline(lm(IQ ~ brain))
plot(df$brain,df$IQ, xlab= "Brain Size in cubic cm", ylab = "IQ", type = "n")
plot(df$brain,df$IQ, xlab= "Brain Size in cubic cm", ylab = "IQ")
abline(lm(IQ ~ brain))
points( mean(brain), mean(IQ))
points( mean(brain), mean(IQ), pch = 21)
points( mean(brain), mean(IQ), pch = 21)
df = data.frame (brain, IQ)
df
plot(df$brain,df$IQ, xlab= "Brain Size in cubic cm", ylab = "IQ")
abline(lm(IQ ~ brain))
points( mean(brain), mean(IQ), pch = 21)
points( mean(brain), mean(IQ), pch = 21)
points( mean(brain), mean(IQ), pch = 19)
abline(mean(brain))
abline(mean(brain),0)
abline(mean(brain),0)
df
plot(df$brain,df$IQ, xlab= "Brain Size in cubic cm", ylab = "IQ")
abline(lm(IQ ~ brain))
points( mean(brain), mean(IQ), pch = 19)
abline(mean(brain),0)
abline(mean(brain),0)
abline(mean(brain),0)
abline(mean(brain),b = 0)
abline(mean(brain),b = 0)
abline(lm(IQ ~ brain))
points( mean(brain), mean(IQ), pch = 19)
abline(mean(brain),b = 0)
abline(mean(IQ),b = 0)
abline(mean(IQ),b = 0, lty = 3)
abline(mean(IQ),b = 0, lty = 3)
abline(lm(IQ ~ brain))
points( mean(brain), mean(IQ), pch = 19)
abline(mean(IQ),b = 0, lty = 3)
abline(mean(IQ),b = 0, lty = 3)
abline(mean(IQ),b = 0, 1ty = 3)
abline(mean(IQ),b = 0, lty=3)
abline(mean(IQ),b = 0, lty=2)
abline(mean(IQ),b = 0, lty=5)
abline(mean(IQ),b = 0, \dots)
df
plot(df$brain,df$IQ, xlab= "Brain Size in cubic cm", ylab = "IQ")
abline(lm(IQ ~ brain))
points( mean(brain), mean(IQ), pch = 19)
abline(mean(IQ),b = 0, lty=2)
abline(mean(IQ),b = 0, lty=2)
abline(v=mean(brain), lty=2)
sd(c(5,8,12))
which.min(c(4,1,6))
xval <- seq(-3.2, 3.2, length = 1000)
yval<- dchisq(xval, 3)
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
xval <- seq(0, 14, length = 1000)
yval<- dchisq(xval, 3)
plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
library(ggplot2)
install.packages(c("akima", "bitops", "boot", "car", "cluster", "digest", "fAssets", "fBasics", "fCopulae", "foreign", "KernSmooth", "lattice", "locfit", "MASS", "mgcv", "mnormt", "mvtnorm", "nlme", "nnet", "PerformanceAnalytics", "psych", "quadprog", "RCurl", "Rglpk", "robustbase", "rpart", "slam", "stabledist", "survival", "timeDate", "timeSeries", "TSA", "tseries", "xts", "zoo"))
install.packages("ggplot2")
library("ggplot2")
library(ggplot2)
eq <- function(x) {x*x}
tmp <- data.frame(x=1:50, y=eq(1:50))
# Make plot object
p <- qplot(x, y, data=tmp, xlab="X-axis", ylab="Y-axis")
c <- stat_function(fun=eq)
print(p + c)
p1 <- qplot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
pritn(p1)
print(p1)
xval <- seq(0, 14, length = 100000)
yval<- dchisq(xval, 3)
yval2<-dchisq(xval, 5)
yval3 <- dchisq(xval, 10)
p1 <- qplot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
print(p1)
p2 <- qplot(xval, yval2, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
print(p1 + p2)
p1 <- plot(xval, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
print(p1 + p2)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
x <- seq(0, 14, length = 1000)
yval<- dchisq(xval, 3)
yval<- dchisq(x, 3)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
curve(dchisq(df =5))
curve(dchisq(x,df =5))
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
curve(dchisq(x,df =5))
curve(dchisq(x,df =5), add= T)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 3, xlab = "", ylab = "")
curve(dchisq(x,df =5), add= T)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
curve(dchisq(x,df =5), add= T)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
curve(dchisq(x,df =5), add= T col = "blue")
curve(dchisq(x,df =5), add= T, col = "blue")
curve(dchisq(x,df =10), add=T, col = "green")
curve(dchisq(x,df =8), add=T, col = "green")
x <- seq(0, 15, length = 1000)
yval<- dchisq(x, 3)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
curve(dchisq(x,df =5), add= T, col = "blue")
curve(dchisq(x,df =8), add=T, col = "green")
curve(dchisq(x,df =10), add=T, col = "green")
x <- seq(0, 15, length = 1000)
yval<- dchisq(x, 3)
x <- seq(0, 15, length = 1000)
yval<- dchisq(x, 3)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
curve(dchisq(x,df =5), add= T, col = "blue")
curve(dchisq(x,df =10), add=T, col = "green")
text(1, mean(dchisq(x,3))+.02, "5%", cex = 2)
text(2, mean(dchisq(x,3))+.02, "5%", cex = 2)
text(2, mdchisq(x,3)+.02, "5%", cex = 2)
text(2, mdchisq(x,3)+.02, "5%", cex = 2)
text(2, dchisq(x,3)+.02, "5%", cex = 2)
x <- seq(0, 15, length = 1000)
yval<- dchisq(x, 3)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
curve(dchisq(x,df =5), add= T, col = "blue")
curve(dchisq(x,df =10), add=T, col = "green")
x <- seq(0, 15, length = 1000)
yval<- dchisq(x, 3)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
curve(dchisq(x,df =5), add= T, col = "blue")
curve(dchisq(x,df =10), add=T, col = "violet")
x <- seq(0, 15, length = 1000)
yval<- dchisq(x, 3)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
curve(dchisq(x,df =5), add= T, col = "blue")
curve(dchisq(x,df =10), add=T, col = "red")
x <- seq(0, 20, length = 1000)
yval<- dchisq(x, 3)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
curve(dchisq(x,df =5), add= T, col = "blue")
curve(dchisq(x,df =10), add=T, col = "red")
1 -(.36^2 + .64^2)
-(.36*log(.36,2) + .64*log(.64,2))
-(.36*log(.36) + .64*log(.64))
x <- seq(0, 10, length = 1000)
yval<- df(x, 3)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
x <- seq(0, 10, length = 1000)
yval<- df(x, 3)
x <- seq(0, 10, length = 1000)
yval<- df(x, 3, 3)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
yval<- df(x, 3, 4)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
x <- seq(0, 10, length = 1000)
yval<- df(x, 3, 10)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
x <- seq(0, 10, length = 1000)
yval<- df(x, 10, 10)
plot(x, yval, type = "l", axes = TRUE, frame = FALSE, lwd = 1, xlab = "", ylab = "")
x = c(0,1,1)
y = c(2,2,8)
df = [x,y]
df = cbind(x,y)
lm(df$y~df$x)
lm(y~x)
linearModel = lm(y~x)
summary(linearModel)
linearModel
mean(df$y)
mean(y)
R.version.string
find.package('devtools')
find.package("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
names(data) <- c(horiBodyAcc)
setwd("~/R/getdata/project")
# Reading the unzipped data.
xTest <- read.table("./UCI HAR Dataset/test/X_test.txt", sep="")
yTest <- read.table("./UCI HAR Dataset/test/y_test.txt", sep="")
xTrain <- read.table("./UCI HAR Dataset/train/X_train.txt", sep="")
yTrain <- read.table("./UCI HAR Dataset/train/y_train.txt", sep="")
# Putting the data together, first we column bind the xtest, ytest into test and xtrain, ytrain into train data.
# Then we will row bind test and train.
test<- cbind(xTest, yTest)
train <- cbind(xTrain, yTrain)
rawdata <- rbind(train, test)
# subsetting rawdata for features with "mean" or "std" in their name, note I choose excluded the features with "meanFreq"
# in the name as it was a weighted average where I am unsure of how it was wieghted.
ms_cols <-c(1:6,41:46,81:86, 121:126, 161:166, 201:202, 214:215, 227:228, 240:241, 253:254, 266:271,
345:350,  424:429,  503:504, 516:517, 529:530, 542:543, 555:561, 562 )
data <-rawdata[,ms_cols]
summary(data)
head(data)
# Now we are going to give descriptive names to the coded activity labels from the original y data sets.
data[data[,74] == 1,74]  <- "walking"
data[data[,74] == 2,74]  <- "walkindatagUp"
data[data[,74] == 3,74]  <- "walkingDown"
data[data[,74] == 4,74]  <- "sitting"
data[data[,74] == 5,74]  <- "standing"
data[data[,74] == 6,74]  <- "laying"
# The following code should rename the variable names from V1, V2 to something more descriptive.
names(data) <- c(horiBodyAcc)
names(data) <- c("horiBodyAcc")
names(data)
?readlines
?read.lines
?read.line
??readlines
con <- file("vnames")
readLines(con)
con <- file("vnames.txt")
readLines(con)
vnames <- read.table(vnames.txt, header = F)
vnames <- read.table("vnames.txt", header = F)
head(vnames)
vnames <- read.table("vnames.txt", header = F)
head(vnames)
tail(vnames)
names(data) <- vnames[,4]
head(data)
vnames <- read.table("vnames.txt", header = F)
head(vnames)
tail(vnames)
vnames <- read.table("vnames.txt", header = F)
head(vnames)
tail(vnames)
names(data) <- vnames[,4]
names(data)
head(data, n= 12)
head(data, n= 24)
head(train)
setwd("~/R/getdata/project")
# Reading the unzipped data.
xTest <- read.table("./UCI HAR Dataset/test/X_test.txt", sep="")
yTest <- read.table("./UCI HAR Dataset/test/y_test.txt", sep="")
subTest <- read.table("./UCI HAR Dataset/test/subject_test.txt", sep="")
xTrain <- read.table("./UCI HAR Dataset/train/X_train.txt", sep="")
yTrain <- read.table("./UCI HAR Dataset/train/y_train.txt", sep="")
subTrain <- read.table("./UCI HAR Dataset/test/subject_train.txt", sep="")
subTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt", sep="")
# Putting the data together, first we column bind the xtest, ytest into test and xtrain, ytrain into train data.
# Then we will row bind test and train.
test<- cbind(xTest, yTest,subTest)
train <- cbind(xTrain, yTrain, subTrain)
rawdata <- rbind(train, test)
# subsetting rawdata for features with "mean" or "std" in their name, note I choose excluded the features with "meanFreq"
# in the name as it was a weighted average where I am unsure of how it was wieghted.
ms_cols <-c(1:6,41:46,81:86, 121:126, 161:166, 201:202, 214:215, 227:228, 240:241, 253:254, 266:271,
345:350,  424:429,  503:504, 516:517, 529:530, 542:543, 555:561, 562 )
data <-rawdata[,ms_cols]
summary(data)
ms_cols <-c(1:6,41:46,81:86, 121:126, 161:166, 201:202, 214:215, 227:228, 240:241, 253:254, 266:271,
345:350,  424:429,  503:504, 516:517, 529:530, 542:543, 555:561, 562, 563 )
data <-rawdata[,ms_cols]
summary(data)
data[data[,74] == 1,74]  <- "walking"
data[data[,74] == 2,74]  <- "walkindatagUp"
data[data[,74] == 3,74]  <- "walkingDown"
data[data[,74] == 4,74]  <- "sitting"
data[data[,74] == 5,74]  <- "standing"
data[data[,74] == 6,74]  <- "laying"
vnames <- read.table("vnames.txt", header = F)
head(vnames)
tail(vnames)
vnames <- read.table("vnames.txt", header = F)
head(vnames)
tail(vnames)
names(data) <- vnames[,4]
summary(data)
libary(reshape2)
library(reshape2)
vnames <- read.table("vnames.txt", header = F)
names(data) <- vnames[,4]
summary(data)
dataMelt <- melt(data, id = c("SubjectID", "Activity"),measure.vars = names(data)[1:74])
heat(dataMelt)
head(dataMelt)
castMelt <- dcast(dataMelt, c(SubjectID, Activity) ~ variable, mean)
View(castMelt)
castMelt <- cast(dataMelt, c(SubjectID, Activity) ~ variable, mean)
??cast
dataMelt <- melt(data, id = c("SubjectID", "Activity"))
head(dataMelt)
castMelt <- cast(dataMelt, c(SubjectID, Activity) ~ variable, mean)
castMelt <- dcast(dataMelt, c(SubjectID, Activity) ~ variable, mean)
View(castMelt)
castMelt <- dcast(dataMelt, SubjectID + Activity ~ variable, mean)
View(castMelt)
mean(data[data[,75 == 1]& data[,74 =="laying"]])
mean(data[data[,75 == 1] & data[,74 =="laying"]])
data[,75 ==1]
data[,75 ==1]
data[,74 =="laying"]
names(data)
data&Activity == "laying"
data$Activity == "laying"
mean(data[data$Activity == "laying"] & data$SubjectID =="1"]])
mean(data[data$Activity == "laying" & data$SubjectID =="1"])
mean(data[data$Activity == "laying" & data$SubjectID ==1])
mean(data[,data$Activity == "laying" & data$SubjectID ==1])
mean(data[data$Activity == "laying" & data$SubjectID ==1], data$tBodyAcc-mean-X)
data$SubjectID == 1
mean(data[data$Activity == "laying" & data$SubjectID == 1, data$tBodyAcc-mean-X])
data[data$Activity == "laying" & data$SubjectID == 1, data$tBodyAcc-mean-X]
mean(data[(data$Activity == "laying") & (data$SubjectID == 1), data$tBodyAcc-mean-X])
mean(data[(data$Activity == "laying" & data$SubjectID == 1), data$tBodyAcc-mean-X])
data$SubjectID == 1
mean(data[,(data$Activity == "laying" & data$SubjectID == 1))
rowmean(data[,(data$Activity == "laying" & data$SubjectID == 1))
rowmean(data[,(data$Activity == "laying" & data$SubjectID == 1)])
?rowmeans
??row mean
??rowmeans
rowMeans(data[,(data$Activity == "laying" & data$SubjectID == 1)])
colMeans(data[(data$Activity == "laying" & data$SubjectID == 1),])
data[(data$Activity == "laying" & data$SubjectID == 1),]
test <- data[(data$Activity == "laying" & data$SubjectID == 1),]
mean(test[1])
mean(test[,1])
?melt
tidyData <- dcast(dataMelt, SubjectID + Activity ~ variable, mean)
View(tidyData)
setwd("~/R/getdata/project/UCI HAR Dataset/")
xTest <- read.table(".test/X_test.txt", sep="")
setwd("~/R/getdata/project/UCI HAR Dataset/")
xTest <- read.table(".test/X_test.txt", sep="")
get(wd)
getwd()
xTest <- read.table("./test/X_test.txt", sep="")
setwd("~/R/getdata/project")
# Reading the unzipped data.
xTest <- read.table("./UCI HAR Dataset//test/X_test.txt", sep="")
yTest <- read.table("./UCI HAR Dataset/test/y_test.txt", sep="")
